syntax = "proto3";

package recc.proto.rpc;

service ReccApi {
    // rpc Test (TestQ) returns (TestA) {}
    // rpc ClientStreamingTest (stream TestQ) returns (TestA) {}
    // rpc ServerStreamingTest (TestQ) returns (stream TestA) {}
    // rpc BidirectionalStreamingTest (stream TestQ) returns (stream TestA) {}

    rpc Heartbeat (Pit) returns (Pat) {}
    rpc Echo (Ping) returns (Pong) {}
    rpc EchoData (Data) returns (Data) {}

    rpc GetWorkspaceSubdir (Empty) returns (Names) {}
    rpc GetTemplateNames (Empty) returns (Names) {}

    rpc UploadTemplate (UploadTemplateQ) returns (UploadTemplateA) {}
    rpc SetTaskBlueprint (SetTaskBlueprintQ) returns (SetTaskBlueprintA) {}

    rpc GetNodeProperty (GetNodePropertyQ) returns (GetNodePropertyA) {}
    rpc SetNodeProperty (SetNodePropertyQ) returns (SetNodePropertyA) {}
    rpc SendSignal (SendSignalQ) returns (SendSignalA) {}
}

// Heartbeat
message Pit {
    float delay = 1;
}
message Pat {
    bool ok = 1;
}

// Echo
message Ping {
    string msg = 1;
}
message Pong {
    string msg = 1;
}

// Common
message Empty {
    // empty field.
}
message Data {
    bytes data = 1;
}
message Result {
    int32 code = 1;
    optional string msg = 2;
}
message Names {
    repeated string names = 1;
}
message TarFile {
    bytes data = 1;
    optional string fmt = 2;  // `format` is a built-in python function.
}

message UploadTemplateQ {
    TarFile tar = 1;
}
message UploadTemplateA {
    Result result = 1;
}

message SetTaskBlueprintQ {
    string json = 1;
}
message SetTaskBlueprintA {
    Result result = 1;
}

// Node Property
message NodePropertyPath {
    string node = 1;
    string prop = 2;
}

message GetNodePropertyQ {
    NodePropertyPath path = 1;
}
message GetNodePropertyA {
    Result result = 1;
    bytes data = 2;
}
message SetNodePropertyQ {
    NodePropertyPath path = 1;
    bytes data = 2;
}
message SetNodePropertyA {
    Result result = 1;
}

// Node Slot
message NodeSlotPath {
    string node = 1;
    string slot = 2;
}
message NodeSlotData {
    NodeSlotPath path = 1;
    bytes data = 3;
}
message NodeSlotDataRequest {
    NodeSlotPath path = 1;
}

message SendSignalQ {
    string name = 1;
    repeated NodeSlotData inject_slots = 2;
    repeated NodeSlotDataRequest extract_slots = 3;
}
message SendSignalA {
    Result result = 1;
    repeated NodeSlotData extracted_slots = 2;
}
