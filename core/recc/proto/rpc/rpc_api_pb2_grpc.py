# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import recc.proto.rpc.rpc_api_pb2 as rpc__api__pb2


class RpcApiStub(object):
    """rpc Test (TestQ) returns (TestA) {}
    rpc ClientStreamingTest (stream TestQ) returns (TestA) {}
    rpc ServerStreamingTest (TestQ) returns (stream TestA) {}
    rpc BidirectionalStreamingTest (stream TestQ) returns (stream TestA) {}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/Heartbeat',
                request_serializer=rpc__api__pb2.Pit.SerializeToString,
                response_deserializer=rpc__api__pb2.Pat.FromString,
                )
        self.Echo = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/Echo',
                request_serializer=rpc__api__pb2.Ping.SerializeToString,
                response_deserializer=rpc__api__pb2.Pong.FromString,
                )
        self.EchoData = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/EchoData',
                request_serializer=rpc__api__pb2.Data.SerializeToString,
                response_deserializer=rpc__api__pb2.Data.FromString,
                )
        self.GetWorkspaceSubdir = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/GetWorkspaceSubdir',
                request_serializer=rpc__api__pb2.Empty.SerializeToString,
                response_deserializer=rpc__api__pb2.Names.FromString,
                )
        self.GetTemplateNames = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/GetTemplateNames',
                request_serializer=rpc__api__pb2.Empty.SerializeToString,
                response_deserializer=rpc__api__pb2.Names.FromString,
                )
        self.UploadTemplate = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/UploadTemplate',
                request_serializer=rpc__api__pb2.UploadTemplateQ.SerializeToString,
                response_deserializer=rpc__api__pb2.UploadTemplateA.FromString,
                )
        self.SetTaskBlueprint = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/SetTaskBlueprint',
                request_serializer=rpc__api__pb2.SetTaskBlueprintQ.SerializeToString,
                response_deserializer=rpc__api__pb2.SetTaskBlueprintA.FromString,
                )
        self.GetNodeProperty = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/GetNodeProperty',
                request_serializer=rpc__api__pb2.GetNodePropertyQ.SerializeToString,
                response_deserializer=rpc__api__pb2.GetNodePropertyA.FromString,
                )
        self.SetNodeProperty = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/SetNodeProperty',
                request_serializer=rpc__api__pb2.SetNodePropertyQ.SerializeToString,
                response_deserializer=rpc__api__pb2.SetNodePropertyA.FromString,
                )
        self.SendSignal = channel.unary_unary(
                '/recc.proto.rpc.RpcApi/SendSignal',
                request_serializer=rpc__api__pb2.SendSignalQ.SerializeToString,
                response_deserializer=rpc__api__pb2.SendSignalA.FromString,
                )


class RpcApiServicer(object):
    """rpc Test (TestQ) returns (TestA) {}
    rpc ClientStreamingTest (stream TestQ) returns (TestA) {}
    rpc ServerStreamingTest (TestQ) returns (stream TestA) {}
    rpc BidirectionalStreamingTest (stream TestQ) returns (stream TestA) {}
    """

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Echo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkspaceSubdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemplateNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadTemplate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTaskBlueprint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeProperty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNodeProperty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=rpc__api__pb2.Pit.FromString,
                    response_serializer=rpc__api__pb2.Pat.SerializeToString,
            ),
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=rpc__api__pb2.Ping.FromString,
                    response_serializer=rpc__api__pb2.Pong.SerializeToString,
            ),
            'EchoData': grpc.unary_unary_rpc_method_handler(
                    servicer.EchoData,
                    request_deserializer=rpc__api__pb2.Data.FromString,
                    response_serializer=rpc__api__pb2.Data.SerializeToString,
            ),
            'GetWorkspaceSubdir': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkspaceSubdir,
                    request_deserializer=rpc__api__pb2.Empty.FromString,
                    response_serializer=rpc__api__pb2.Names.SerializeToString,
            ),
            'GetTemplateNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemplateNames,
                    request_deserializer=rpc__api__pb2.Empty.FromString,
                    response_serializer=rpc__api__pb2.Names.SerializeToString,
            ),
            'UploadTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadTemplate,
                    request_deserializer=rpc__api__pb2.UploadTemplateQ.FromString,
                    response_serializer=rpc__api__pb2.UploadTemplateA.SerializeToString,
            ),
            'SetTaskBlueprint': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTaskBlueprint,
                    request_deserializer=rpc__api__pb2.SetTaskBlueprintQ.FromString,
                    response_serializer=rpc__api__pb2.SetTaskBlueprintA.SerializeToString,
            ),
            'GetNodeProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeProperty,
                    request_deserializer=rpc__api__pb2.GetNodePropertyQ.FromString,
                    response_serializer=rpc__api__pb2.GetNodePropertyA.SerializeToString,
            ),
            'SetNodeProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNodeProperty,
                    request_deserializer=rpc__api__pb2.SetNodePropertyQ.FromString,
                    response_serializer=rpc__api__pb2.SetNodePropertyA.SerializeToString,
            ),
            'SendSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSignal,
                    request_deserializer=rpc__api__pb2.SendSignalQ.FromString,
                    response_serializer=rpc__api__pb2.SendSignalA.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'recc.proto.rpc.RpcApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RpcApi(object):
    """rpc Test (TestQ) returns (TestA) {}
    rpc ClientStreamingTest (stream TestQ) returns (TestA) {}
    rpc ServerStreamingTest (TestQ) returns (stream TestA) {}
    rpc BidirectionalStreamingTest (stream TestQ) returns (stream TestA) {}
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/Heartbeat',
            rpc__api__pb2.Pit.SerializeToString,
            rpc__api__pb2.Pat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/Echo',
            rpc__api__pb2.Ping.SerializeToString,
            rpc__api__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EchoData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/EchoData',
            rpc__api__pb2.Data.SerializeToString,
            rpc__api__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkspaceSubdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/GetWorkspaceSubdir',
            rpc__api__pb2.Empty.SerializeToString,
            rpc__api__pb2.Names.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTemplateNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/GetTemplateNames',
            rpc__api__pb2.Empty.SerializeToString,
            rpc__api__pb2.Names.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/UploadTemplate',
            rpc__api__pb2.UploadTemplateQ.SerializeToString,
            rpc__api__pb2.UploadTemplateA.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTaskBlueprint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/SetTaskBlueprint',
            rpc__api__pb2.SetTaskBlueprintQ.SerializeToString,
            rpc__api__pb2.SetTaskBlueprintA.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/GetNodeProperty',
            rpc__api__pb2.GetNodePropertyQ.SerializeToString,
            rpc__api__pb2.GetNodePropertyA.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetNodeProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/SetNodeProperty',
            rpc__api__pb2.SetNodePropertyQ.SerializeToString,
            rpc__api__pb2.SetNodePropertyA.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/recc.proto.rpc.RpcApi/SendSignal',
            rpc__api__pb2.SendSignalQ.SerializeToString,
            rpc__api__pb2.SendSignalA.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
